# app/config.py
import json
import logging
from functools import lru_cache
from typing import Dict, Any, Optional, List
from pydantic import field_validator, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Pydantic V2.
    –í—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """

    # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    debug: bool = False
    uvicorn_reload: bool = False
    environment: str = "production"

    # === OPENAI –ù–ê–°–¢–†–û–ô–ö–ò ===
    openai_api_key: str
    openai_model: str = "gpt-5"
    openai_model_for_markup: str = "gpt-4o"

    # –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è OpenAI (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    openai_timeout_connect: float = 30.0
    openai_timeout_read: float = 900.0

    # === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
    database_url: str
    database_pool_size: int = 20
    database_max_overflow: int = 30

    # === SELECTEL S3 ===
    selectel_access_key: str
    selectel_secret_key: str
    selectel_bucket_name: str
    selectel_domain: str

    # === GOOGLE CLOUD ===
    google_cloud_project_id: Optional[str] = None
    temp_gcs_bucket_name: Optional[str] = None
    google_cloud_credentials: Optional[str] = None

    # === YANDEX CLOUD ===
    yandex_api_key: str
    yandex_folder_id: str

    # === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
    allowed_origins: List[str] = [
        "http://127.0.0.1:8000"
    ]

    # === –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ï–†–ê ===
    server_ip: Optional[str] = None
    server_domain: Optional[str] = None  # –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–º–µ–Ω

    # === –õ–ò–ú–ò–¢–´ –ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ ===
    max_request_size_mb: int = 10
    rate_limit_requests_per_minute: int = 3
    story_generation_timeout: int = 600  # 10 –º–∏–Ω—É—Ç

    # === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    log_level: str = "INFO"
    log_format: str = "json"

    # === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
    sentry_dsn: Optional[str] = None
    metrics_enabled: bool = True

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Pydantic V2
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding='utf-8',
        case_sensitive=False,
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        # debug -> DEBUG, openai_api_key -> OPENAI_API_KEY
        env_prefix="",
        extra="ignore"  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    )

    # === –í–ê–õ–ò–î–ê–¢–û–†–´ (Pydantic V2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å) ===

    @field_validator("openai_api_key")
    @classmethod
    def validate_openai_key(cls, v: str) -> str:
        if not v or not v.startswith("sk-"):
            raise ValueError("OpenAI API key –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-'")
        if len(v) < 20:
            raise ValueError("OpenAI API key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return v

    @field_validator("openai_model")
    @classmethod
    def validate_openai_model(cls, v: str) -> str:
        allowed_models = [
            "gpt-5", "gpt-4o", "gpt-4o-mini", "gpt-4-turbo",
            "gpt-4", "gpt-3.5-turbo"
        ]
        if v not in allowed_models:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {v} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã: {allowed_models}")
        return v

    @field_validator("database_url")
    @classmethod
    def validate_database_url(cls, v: str) -> str:
        if not v or not v.startswith(("postgresql://", "postgresql+asyncpg://")):
            raise ValueError("DATABASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql:// –∏–ª–∏ postgresql+asyncpg://")
        return v

    @field_validator("log_level")
    @classmethod
    def validate_log_level(cls, v: str) -> str:
        allowed_levels = ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
        if v.upper() not in allowed_levels:
            raise ValueError(f"LOG_LEVEL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {allowed_levels}")
        return v.upper()

    @classmethod
    def validate_environment(cls, v: str) -> str:
        allowed_envs = ["development", "staging", "production"]
        if v not in allowed_envs:
            raise ValueError(f"ENVIRONMENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: {allowed_envs}")
        return v

    @field_validator("allowed_origins", mode='before')
    @classmethod
    def validate_origins(cls, v):
        if isinstance(v, str):
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
            return [origin.strip() for origin in v.split(",")]
        return v

    @model_validator(mode='after')
    def validate_google_cloud_settings(self) -> 'Settings':
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Google Cloud –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã"""
        if self.google_cloud_project_id and not self.google_cloud_credentials:
            raise ValueError("–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω GOOGLE_CLOUD_PROJECT_ID, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å GOOGLE_CLOUD_CREDENTIALS")
        return self

    # === –ü–†–û–ò–ó–í–û–î–ù–´–ï –°–í–û–ô–°–¢–í–ê ===

    @property
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return self.environment == "development" or self.debug

    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
        return self.environment == "production"

    @property
    def google_cloud_credentials_dict(self) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Google Cloud credentials –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å"""
        if not self.google_cloud_credentials:
            return None
        try:
            return json.loads(self.google_cloud_credentials)
        except json.JSONDecodeError as e:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GOOGLE_CLOUD_CREDENTIALS: {e}")

    @property
    def max_request_size_bytes(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö"""
        return self.max_request_size_mb * 1024 * 1024

    @property
    def openai_timeout_config(self) -> dict:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è OpenAI"""
        return {
            "connect": self.openai_timeout_connect,
            "read": self.openai_timeout_read,
            "write": 30.0,
            "pool": 30.0
        }

    def get_server_urls(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö URL"""
        urls = []

        if self.server_domain:
            urls.extend([
                f"https://{self.server_domain}",
                f"https://www.{self.server_domain}",
            ])

        if self.server_ip:
            urls.extend([
                f"https://{self.server_ip}",
                f"http://{self.server_ip}:8000",  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ SSL –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            ])

        return urls

    def get_cors_config(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é CORS"""

        if self.is_development:
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
            allowed_origins = [
                "http://localhost:3000",
                "http://localhost:5173",
                "http://localhost:8080",
                "http://127.0.0.1:3000",
                "http://127.0.0.1:5173",
                "http://127.0.0.1:8080",
            ]
        else:
            # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö URL
            allowed_origins = self.get_server_urls()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ origins –∏–∑ .env
            # allowed_origins.extend(self.additional_origins)

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        allowed_origins = list(set(filter(None, allowed_origins)))

        return {
            "allow_origins": allowed_origins,
            "allow_credentials": True,
            "allow_methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allow_headers": [
                "Content-Type",
                "Authorization",
                "Accept",
                "Accept-Language",
                "X-Request-ID"
            ],
            "expose_headers": ["X-Request-ID"],
            "max_age": 3600 if not self.is_development else 600
        }

    def log_server_info(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        logger = logging.getLogger(__name__)

        logger.info("üåê Server Configuration:")
        if self.server_domain:
            logger.info(f"  üìç Domain: {self.server_domain}")
        if self.server_ip:
            logger.info(f"  üìç IP: {self.server_ip}")

        server_urls = self.get_server_urls()
        if server_urls:
            logger.info(f"  üîó Available URLs: {server_urls}")
        else:
            logger.warning("  ‚ö†Ô∏è  No server URLs configured! Set SERVER_IP or SERVER_DOMAIN")

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===

@lru_cache()
def get_settings() -> Settings:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        from app.config import get_settings

        settings = get_settings()
        print(settings.openai_api_key)
    """
    return Settings()


# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–º–ø–æ—Ä—Ç–∞
settings = get_settings()


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===

def validate_all_settings() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –í—ã–∑—ã–≤–∞–π—Ç–µ –≤ main.py –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.
    """
    try:
        current_settings = get_settings()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        assert current_settings.openai_api_key, "OpenAI API key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert current_settings.database_url, "Database URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert current_settings.yandex_api_key, "Yandex API key –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {e}")
        return False


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validate_all_settings()
    current_settings = get_settings()
    print(f"Environment: {current_settings.environment}")
    print(f"Debug mode: {current_settings.debug}")
    print(f"Database configured: {'Yes' if current_settings.database_url else 'No'}")