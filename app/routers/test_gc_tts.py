import os
import asyncio
from google.cloud import texttospeech
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

sempl_text = """
     <speak> <p> <s>In a little village nestled between whispering birch forests and fields of golden wheat, lived a quiet boy named Misha.</s> <break time="300ms"/> <s>His cottage had a thatched roof that wore a crown of moss, and his best friend was a fluffy ginger cat named Zhivchik, which means "lively one."</s> <break time="400ms"/> <s>Every evening, Misha's grandmother would stoke the warm, crackling fire in their big clay stove, and the whole house would glow with a cozy light.</s> <break time="500ms"/> <s>Zhivchik would curl his tail neatly around his paws and watch the dancing flames, his eyes two little moons in the firelight.</s> </p> <break time="600ms"/></speak>
"""


def check_network_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google APIs"""
    import socket
    import requests

    print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

    if len(sempl_text) > 5000:
        print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 5000 —Å–∏–º–≤–æ–ª–æ–≤!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å")
        return False
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    try:
        ip = socket.gethostbyname('texttospeech.googleapis.com')
        print(f"‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: texttospeech.googleapis.com -> {ip}")
    except socket.gaierror as e:
        print(f"‚ùå DNS –æ—à–∏–±–∫–∞: {e}")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        response = requests.get('https://texttospeech.googleapis.com', timeout=10)
        print(f"‚úÖ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
        return False


async def test_google_cloud_tts():
    """–¢–µ—Å—Ç Google Cloud TTS –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    print("üéµ –¢–µ—Å—Ç–∏—Ä—É–µ–º Google Cloud TTS...")

    if not check_network_connectivity():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
        if not credentials_path:
            raise ValueError("‚ùå GOOGLE_APPLICATION_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

        if not os.path.exists(credentials_path):
            raise ValueError(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")

        print(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {credentials_path}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Google TTS
        client = texttospeech.TextToSpeechClient()

        print(f"üìù –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç: '{sempl_text[:50]}...'")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞
        synthesis_input = texttospeech.SynthesisInput(ssml=sempl_text)

        name="fr-FR-Studio-D"

        # –í—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞: ru-RU-Standard-A, ru-RU-Standard-B, ru-RU-Standard-C, ru-RU-Standard-D
        voice = texttospeech.VoiceSelectionParams(
            language_code="fr-FR",
            name=name,  # –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
            ssml_gender=texttospeech.SsmlVoiceGender.MALE
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        audio_config = texttospeech.AudioConfig(
            audio_encoding=texttospeech.AudioEncoding.MP3,
            speaking_rate=0.9,  # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (0.25 - 4.0)
            volume_gain_db=-2.0
        )

        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ...")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ –æ–±–µ—Ä–Ω—É—Ç—ã–π –≤ async —Ñ—É–Ω–∫—Ü–∏—é)
        response = await asyncio.get_event_loop().run_in_executor(
            None,
            client.synthesize_speech,
            {
                "input": synthesis_input,
                "voice": voice,
                "audio_config": audio_config
            }
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        output_filename = f"google_tts_{name}_MALE.mp3"
        with open(output_filename, "wb") as f:
            f.write(response.audio_content)

        print(f"‚úÖ Google Cloud TTS —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_filename}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.audio_content)} –±–∞–π—Ç")
        print(f"üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≥–æ–ª–æ—Å: {name}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Cloud TTS: {e}")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    asyncio.run(test_google_cloud_tts())

    # # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
    # print("\n" + "=" * 50)
    # asyncio.run(test_multiple_voices())